# vim: ft=cfg
#
# This is the configuration file of "rifle", ranger's file executor/opener.
# Each line consists of conditions and a command.  For each line the conditions
# are checked and if they are met, the respective command is run.
#
# Syntax:
#   <condition1> , <condition2> , ... = command
#
# The command can contain these environment variables:
#   $1-$9 | The n-th selected file
#   $@    | All selected files
#
# If you use the special command "ask", rifle will ask you what program to run.
#
# Prefixing a condition with "!" will negate its result.
# These conditions are currently supported:
#   match <regexp> | The regexp matches $1
#   ext <regexp>   | The regexp matches the extension of $1
#   mime <regexp>  | The regexp matches the mime type of $1
#   name <regexp>  | The regexp matches the basename of $1
#   path <regexp>  | The regexp matches the absolute path of $1
#   has <program>  | The program is installed (i.e. located in $PATH)
#   env <variable> | The environment variable "variable" is non-empty
#   file           | $1 is a file
#   directory      | $1 is a directory
#   number <n>     | change the number of this command to n
#   terminal       | stdin, stderr and stdout are connected to a terminal
#   X              | A graphical environment is available (darwin, Xorg, or Wayland)
#
# There are also pseudo-conditions which have a "side effect":
#   flag <flags>  | Change how the program is run. See below.
#   label <label> | Assign a label or name to the command so it can
#                 | be started with :open_with <label> in ranger
#                 | or `rifle -p <label>` in the standalone executable.
#   else          | Always true.
#
# Flags are single characters which slightly transform the command:
#   f | Fork the program, make it run in the background.
#     |   New command = setsid $command >& /dev/null &
#   r | Execute the command with root permissions
#     |   New command = sudo $command
#   t | Run the program in a new terminal.  If $TERMCMD is not defined,
#     | rifle will attempt to extract it from $TERM.
#     |   New command = $TERMCMD -e $command
# Note: The "New command" serves only as an illustration, the exact
# implementation may differ.
# Note: When using rifle in ranger, there is an additional flag "c" for
# only running the current file even if you have marked multiple files.

#-------------------------------------------
# Websites
#-------------------------------------------
ext x?html?, has surf,             X, flag f = surf -- file://"$1"
ext x?html?, has vimprobable,      X, flag f = vimprobable -- "$@"
ext x?html?, has vimprobable2,     X, flag f = vimprobable2 -- "$@"
ext x?html?, has qutebrowser,      X, flag f = qutebrowser -- "$@"
ext x?html?, has dwb,              X, flag f = dwb -- "$@"
ext x?html?, has jumanji,          X, flag f = jumanji -- "$@"
ext x?html?, has luakit,           X, flag f = luakit -- "$@"
ext x?html?, has uzbl,             X, flag f = uzbl -- "$@"
ext x?html?, has uzbl-tabbed,      X, flag f = uzbl-tabbed -- "$@"
ext x?html?, has uzbl-browser,     X, flag f = uzbl-browser -- "$@"
ext x?html?, has uzbl-core,        X, flag f = uzbl-core -- "$@"
ext x?html?, has midori,           X, flag f = midori -- "$@"
ext x?html?, has opera,            X, flag f = opera -- "$@"
ext x?html?, has firefox,          X, flag f = firefox -- "$@"
ext x?html?, has seamonkey,        X, flag f = seamonkey -- "$@"
ext x?html?, has iceweasel,        X, flag f = iceweasel -- "$@"
ext x?html?, has chromium-browser, X, flag f = chromium-browser -- "$@"
ext x?html?, has chromium,         X, flag f = chromium -- "$@"
ext x?html?, has google-chrome,    X, flag f = google-chrome -- "$@"
ext x?html?, has epiphany,         X, flag f = epiphany -- "$@"
ext x?html?, has konqueror,        X, flag f = konqueror -- "$@"
ext x?html?, has elinks,            terminal = elinks "$@"
ext x?html?, has links2,            terminal = links2 "$@"
ext x?html?, has links,             terminal = links "$@"
ext x?html?, has lynx,              terminal = lynx -- "$@"
ext x?html?, has w3m,               terminal = w3m "$@"

#-------------------------------------------
# Text files
#-------------------------------------------
# Handle normal text MIME types
mime ^text,  label editor = ${VISUAL:-nvim} -- "$@"
mime ^text,  label pager  = "$PAGER" -- "$@"

# Explicit extensions to open in editor
ext tpl|xml|json|csv|tex|py|pl|rb|js|sh|php|yaml|yml|sql = ${VISUAL:-nvim} -- "$@"

# Generic fallback for non-text files
!mime ^text, !ext tpl|xml|json|csv|tex|py|pl|rb|js|sh|php|yaml|yml|sql = ask
label editor, !mime ^text, !ext tpl|xml|json|csv|tex|py|pl|rb|js|sh|php|yaml|yml|sql = ${VISUAL:-EDITOR} -- "$@"
label pager,  !mime ^text, !ext tpl|xml|json|csv|tex|py|pl|rb|js|sh|php|yaml|yml|sql = "$PAGER" -- "$@"

#-------------------------------------------
# Other rules
#-------------------------------------------
ext 1                         = man "$1"
ext s[wmf]c, has zsnes, X     = zsnes "$1"
ext s[wmf]c, has snes9x-gtk,X = snes9x-gtk "$1"
ext nes, has fceux, X         = fceux "$1"
ext exe                       = wine "$1"
name ^[mM]akefile$            = make

ext py  = python -- "$1"
ext pl  = perl -- "$1"
ext rb  = ruby -- "$1"
ext js  = node -- "$1"
ext sh  = sh -- "$1"
ext php = php -- "$1"

#-------------------------------------------
# Audio without X
#-------------------------------------------
mime ^audio|ogg$, terminal, has mpv      = mpv -- "$@"
mime ^audio|ogg$, terminal, has mplayer2 = mplayer2 -- "$@"
mime ^audio|ogg$, terminal, has mplayer  = mplayer -- "$@"
ext midi?,        terminal, has wildmidi = wildmidi -- "$@"

#-------------------------------------------
# Video/Audio with a GUI
#-------------------------------------------
mime ^video|audio, has gmplayer, X, flag f = gmplayer -- "$@"
mime ^video|audio, has smplayer, X, flag f = smplayer "$@"
mime ^video,       has mpv,      X, flag f = mpv -- "$@"
mime ^video,       has mpv,      X, flag f = mpv --fs -- "$@"
mime ^video,       has mplayer2, X, flag f = mplayer2 -- "$@"
mime ^video,       has mplayer2, X, flag f = mplayer2 -fs -- "$@"
mime ^video,       has mplayer,  X, flag f = mplayer -- "$@"
mime ^video,       has mplayer,  X, flag f = mplayer -fs -- "$@"
mime ^video|audio, has vlc,      X, flag f = vlc -- "$@"
mime ^video|audio, has totem,    X, flag f = totem -- "$@"
mime ^video|audio, has totem,    X, flag f = totem --fullscreen -- "$@"

#-------------------------------------------
# Video without X
#-------------------------------------------
mime ^video, terminal, !X, has mpv       = mpv -- "$@"
mime ^video, terminal, !X, has mplayer2  = mplayer2 -- "$@"
mime ^video, terminal, !X, has mplayer   = mplayer -- "$@"

#-------------------------------------------
# Documents, images, archives, etc.
#-------------------------------------------
# (Keep all your existing rules here unchanged)
# ...

#-------------------------------------------
# Generic file openers
#-------------------------------------------
label open, has xdg-open = xdg-open -- "$@"
label open, has open     = open -- "$@"

# Execute a file as program/script
mime application/x-executable = "$1"

# Move file to trash
label trash, has trash-put = trash-put -- "$@"
label trash = mkdir -p -- ${XDG_DATA_DIR:-$HOME/.ranger}/ranger-trash; mv -- "$@" ${XDG_DATA_DIR:-$HOME/.ranger}/ranger-trash

